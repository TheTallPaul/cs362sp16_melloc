NUMHANDCARDS TEST SUCCESSFULLY COMPLETED.
File 'dominion.c'
Lines executed:20.88% of 522
dominion.c:creating 'dominion.c.gcov'

WHOSETURN TEST SUCCESSFULLY COMPLETED.
File 'dominion.c'
Lines executed:20.69% of 522
dominion.c:creating 'dominion.c.gcov'

DRAWCARD TEST SUCCESSFULLY COMPLETED.
File 'dominion.c'
Lines executed:20.88% of 522
dominion.c:creating 'dominion.c.gcov'

ISGAMEOVER TEST SUCCESSFULLY COMPLETED.
File 'dominion.c'
Lines executed:22.80% of 522
dominion.c:creating 'dominion.c.gcov'

SMITHY TEST SUCCESSFULLY COMPLETED.
File 'dominion.c'
Lines executed:24.71% of 522
dominion.c:creating 'dominion.c.gcov'

STEWARD TEST SUCCESSFULLY COMPLETED.
File 'dominion.c'
Lines executed:24.71% of 522
dominion.c:creating 'dominion.c.gcov'

FAILED ASSERTION: Wrong number of coins gained by minion.
File 'dominion.c'
Lines executed:26.25% of 522
dominion.c:creating 'dominion.c.gcov'

VILLAGE TEST SUCCESSFULLY COMPLETED.
File 'dominion.c'
Lines executed:25.29% of 522
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include "cardEffects.h"
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:int compare(const void* a, const void* b) {
       28:   10:        if (*(int*)a > *(int*)b)
    #####:   11:                return 1;
       28:   12:        if (*(int*)a < *(int*)b)
       10:   13:                return -1;
       18:   14:        return 0;
       28:   15:}
        -:   16:
        -:   17:struct gameState* newGame() {
    #####:   18:        struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:        return g;
        -:   20:}
        -:   21:
        -:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:                  int k8, int k9, int k10) {
    #####:   24:        int* k = malloc(10 * sizeof(int));
    #####:   25:        k[0] = k1;
    #####:   26:        k[1] = k2;
    #####:   27:        k[2] = k3;
    #####:   28:        k[3] = k4;
    #####:   29:        k[4] = k5;
    #####:   30:        k[5] = k6;
    #####:   31:        k[6] = k7;
    #####:   32:        k[7] = k8;
    #####:   33:        k[8] = k9;
    #####:   34:        k[9] = k10;
    #####:   35:        return k;
        -:   36:}
        -:   37:
        -:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:                   struct gameState *state) {
        -:   40:
        -:   41:        int i;
        -:   42:        int j;
        -:   43:        int it;
        -:   44:        //set up random number generator
        1:   45:        SelectStream(1);
        1:   46:        PutSeed((long)randomSeed);
        -:   47:
        -:   48:        //check number of players
        2:   49:        if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   50:        {
    #####:   51:                return -1;
        -:   52:        }
        -:   53:
        -:   54:        //set number of players
        1:   55:        state->numPlayers = numPlayers;
        -:   56:
        -:   57:        //check selected kingdom cards are different
       22:   58:        for (i = 0; i < 10; i++)
        -:   59:        {
      220:   60:                for (j = 0; j < 10; j++)
        -:   61:                {
      190:   62:                        if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   63:                        {
    #####:   64:                                return -1;
        -:   65:                        }
      100:   66:                }
       10:   67:        }
        -:   68:
        -:   69:
        -:   70:        //initialize supply
        -:   71:        ///////////////////////////////
        -:   72:
        -:   73:        //set number of Curse cards
        1:   74:        if (numPlayers == 2)
        -:   75:        {
        1:   76:                state->supplyCount[curse] = 10;
        1:   77:        }
    #####:   78:        else if (numPlayers == 3)
        -:   79:        {
    #####:   80:                state->supplyCount[curse] = 20;
    #####:   81:        }
        -:   82:        else
        -:   83:        {
    #####:   84:                state->supplyCount[curse] = 30;
        -:   85:        }
        -:   86:
        -:   87:        //set number of Victory cards
        1:   88:        if (numPlayers == 2)
        -:   89:        {
        1:   90:                state->supplyCount[estate] = 8;
        1:   91:                state->supplyCount[duchy] = 8;
        1:   92:                state->supplyCount[province] = 8;
        1:   93:        }
        -:   94:        else
        -:   95:        {
    #####:   96:                state->supplyCount[estate] = 12;
    #####:   97:                state->supplyCount[duchy] = 12;
    #####:   98:                state->supplyCount[province] = 12;
        -:   99:        }
        -:  100:
        -:  101:        //set number of Treasure cards
        1:  102:        state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  103:        state->supplyCount[silver] = 40;
        1:  104:        state->supplyCount[gold] = 30;
        -:  105:
        -:  106:        //set number of Kingdom cards
       42:  107:        for (i = adventurer; i <= treasure_map; i++)  //loop all cards
        -:  108:        {
      330:  109:                for (j = 0; j < 10; j++)    //loop chosen cards
        -:  110:                {
      155:  111:                        if (kingdomCards[j] == i)
        -:  112:                        {
        -:  113:                                //check if card is a 'Victory' Kingdom card
       20:  114:                                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  115:                                {
        1:  116:                                        if (numPlayers == 2) {
        1:  117:                                                state->supplyCount[i] = 8;
        1:  118:                                        }
    #####:  119:                                        else{ state->supplyCount[i] = 12; }
        1:  120:                                }
        -:  121:                                else
        -:  122:                                {
        9:  123:                                        state->supplyCount[i] = 10;
        -:  124:                                }
       10:  125:                                break;
        -:  126:                        }
        -:  127:                        else //card is not in the set choosen for the game
        -:  128:                        {
      145:  129:                                state->supplyCount[i] = -1;
        -:  130:                        }
      145:  131:                }
        -:  132:
       20:  133:        }
        -:  134:
        -:  135:        ////////////////////////
        -:  136:        //supply intilization complete
        -:  137:
        -:  138:        //set player decks
        6:  139:        for (i = 0; i < numPlayers; i++)
        -:  140:        {
        2:  141:                state->deckCount[i] = 0;
       16:  142:                for (j = 0; j < 3; j++)
        -:  143:                {
        6:  144:                        state->deck[i][j] = estate;
        6:  145:                        state->deckCount[i]++;
        6:  146:                }
       32:  147:                for (j = 3; j < 10; j++)
        -:  148:                {
       14:  149:                        state->deck[i][j] = copper;
       14:  150:                        state->deckCount[i]++;
       14:  151:                }
        2:  152:        }
        -:  153:
        -:  154:        //shuffle player decks
        6:  155:        for (i = 0; i < numPlayers; i++)
        -:  156:        {
        2:  157:                if ( shuffle(i, state) < 0 )
        -:  158:                {
    #####:  159:                        return -1;
        -:  160:                }
        2:  161:        }
        -:  162:
        -:  163:        //draw player hands
        6:  164:        for (i = 0; i < numPlayers; i++)
        -:  165:        {
        -:  166:                //initialize hand size to zero
        2:  167:                state->handCount[i] = 0;
        2:  168:                state->discardCount[i] = 0;
        -:  169:                //draw 5 cards
        -:  170:                // for (j = 0; j < 5; j++)
        -:  171:                //	{
        -:  172:                //	  drawCard(i, state);
        -:  173:                //	}
        2:  174:        }
        -:  175:
        -:  176:        //set embargo tokens to 0 for all supply piles
       56:  177:        for (i = 0; i <= treasure_map; i++)
        -:  178:        {
       27:  179:                state->embargoTokens[i] = 0;
       27:  180:        }
        -:  181:
        -:  182:        //initialize first player's turn
        1:  183:        state->outpostPlayed = 0;
        1:  184:        state->phase = 0;
        1:  185:        state->numActions = 1;
        1:  186:        state->numBuys = 1;
        1:  187:        state->playedCardCount = 0;
        1:  188:        state->whoseTurn = 0;
        1:  189:        state->handCount[state->whoseTurn] = 0;
        -:  190:        //int it; move to top
        -:  191:
        -:  192:        //Moved draw cards to here, only drawing at the start of a turn
       12:  193:        for (it = 0; it < 5; it++) {
        5:  194:                drawCard(state->whoseTurn, state);
        5:  195:        }
        -:  196:
        1:  197:        updateCoins(state->whoseTurn, state, 0);
        -:  198:
        1:  199:        return 0;
        1:  200:}
        -:  201:
        -:  202:int shuffle(int player, struct gameState *state) {
        -:  203:
        -:  204:
        -:  205:        int newDeck[MAX_DECK];
        2:  206:        int newDeckPos = 0;
        -:  207:        int card;
        -:  208:        int i;
        -:  209:
        2:  210:        if (state->deckCount[player] < 1)
    #####:  211:                return -1;
        2:  212:        qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  213:        /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  214:
       44:  215:        while (state->deckCount[player] > 0) {
       20:  216:                card = floor(Random() * state->deckCount[player]);
       20:  217:                newDeck[newDeckPos] = state->deck[player][card];
       20:  218:                newDeckPos++;
      124:  219:                for (i = card; i < state->deckCount[player]-1; i++) {
       42:  220:                        state->deck[player][i] = state->deck[player][i+1];
       42:  221:                }
       20:  222:                state->deckCount[player]--;
        -:  223:        }
       44:  224:        for (i = 0; i < newDeckPos; i++) {
       20:  225:                state->deck[player][i] = newDeck[i];
       20:  226:                state->deckCount[player]++;
       20:  227:        }
        -:  228:
        2:  229:        return 0;
        2:  230:}
        -:  231:
        -:  232:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  233:{
        -:  234:        int card;
    #####:  235:        int coin_bonus = 0; //tracks coins gain from actions
        -:  236:
        -:  237:        //check if it is the right phase
    #####:  238:        if (state->phase != 0)
        -:  239:        {
    #####:  240:                return -1;
        -:  241:        }
        -:  242:
        -:  243:        //check if player has enough actions
    #####:  244:        if ( state->numActions < 1 )
        -:  245:        {
    #####:  246:                return -1;
        -:  247:        }
        -:  248:
        -:  249:        //get card played
    #####:  250:        card = handCard(handPos, state);
        -:  251:
        -:  252:        //check if selected card is an action
    #####:  253:        if ( card < adventurer || card > treasure_map )
        -:  254:        {
    #####:  255:                return -1;
        -:  256:        }
        -:  257:
        -:  258:        //play card
    #####:  259:        if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  260:        {
    #####:  261:                return -1;
        -:  262:        }
        -:  263:
        -:  264:        //reduce number of actions
    #####:  265:        state->numActions--;
        -:  266:
        -:  267:        //update coins (Treasure cards may be added with card draws)
    #####:  268:        updateCoins(state->whoseTurn, state, coin_bonus);
        -:  269:
    #####:  270:        return 0;
    #####:  271:}
        -:  272:
        -:  273:int buyCard(int supplyPos, struct gameState *state) {
        -:  274:        int who;
        -:  275:        if (DEBUG) {
        -:  276:                printf("Entering buyCard...\n");
        -:  277:        }
        -:  278:
        -:  279:        // I don't know what to do about the phase thing.
        -:  280:
    #####:  281:        who = state->whoseTurn;
        -:  282:
    #####:  283:        if (state->numBuys < 1) {
        -:  284:                if (DEBUG)
        -:  285:                        printf("You do not have any buys left\n");
    #####:  286:                return -1;
    #####:  287:        } else if (supplyCount(supplyPos, state) <1) {
        -:  288:                if (DEBUG)
        -:  289:                        printf("There are not any of that type of card left\n");
    #####:  290:                return -1;
    #####:  291:        } else if (state->coins < getCost(supplyPos)) {
        -:  292:                if (DEBUG)
        -:  293:                        printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  294:                return -1;
        -:  295:        } else {
    #####:  296:                state->phase=1;
        -:  297:                //state->supplyCount[supplyPos]--;
    #####:  298:                gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  299:
    #####:  300:                state->coins = (state->coins) - (getCost(supplyPos));
    #####:  301:                state->numBuys--;
        -:  302:                if (DEBUG)
        -:  303:                        printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  304:        }
        -:  305:
        -:  306:        //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  307:        //state->discardCount[who]++;
        -:  308:
    #####:  309:        return 0;
    #####:  310:}
        -:  311:
        -:  312:int numHandCards(struct gameState *state) {
        2:  313:        return state->handCount[ whoseTurn(state) ];
        -:  314:}
        -:  315:
        -:  316:int handCard(int handPos, struct gameState *state) {
    #####:  317:        int currentPlayer = whoseTurn(state);
    #####:  318:        return state->hand[currentPlayer][handPos];
        -:  319:}
        -:  320:
        -:  321:int supplyCount(int card, struct gameState *state) {
    #####:  322:        return state->supplyCount[card];
        -:  323:}
        -:  324:
        -:  325:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  326:        int i;
    #####:  327:        int count = 0;
        -:  328:
    #####:  329:        for (i = 0; i < state->deckCount[player]; i++)
        -:  330:        {
    #####:  331:                if (state->deck[player][i] == card) count++;
    #####:  332:        }
        -:  333:
    #####:  334:        for (i = 0; i < state->handCount[player]; i++)
        -:  335:        {
    #####:  336:                if (state->hand[player][i] == card) count++;
    #####:  337:        }
        -:  338:
    #####:  339:        for (i = 0; i < state->discardCount[player]; i++)
        -:  340:        {
    #####:  341:                if (state->discard[player][i] == card) count++;
    #####:  342:        }
        -:  343:
    #####:  344:        return count;
        -:  345:}
        -:  346:
        -:  347:int whoseTurn(struct gameState *state) {
        3:  348:        return state->whoseTurn;
        -:  349:}
        -:  350:
        -:  351:int endTurn(struct gameState *state) {
        -:  352:        int k;
        -:  353:        int i;
    #####:  354:        int currentPlayer = whoseTurn(state);
        -:  355:
        -:  356:        //Discard hand
    #####:  357:        for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  358:                state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  359:                state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  360:        }
    #####:  361:        state->handCount[currentPlayer] = 0;//Reset hand count
        -:  362:
        -:  363:        //Code for determining the player
    #####:  364:        if (currentPlayer < (state->numPlayers - 1)) {
    #####:  365:                state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  366:        }
        -:  367:        else{
    #####:  368:                state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  369:        }
        -:  370:
    #####:  371:        state->outpostPlayed = 0;
    #####:  372:        state->phase = 0;
    #####:  373:        state->numActions = 1;
    #####:  374:        state->coins = 0;
    #####:  375:        state->numBuys = 1;
    #####:  376:        state->playedCardCount = 0;
    #####:  377:        state->handCount[state->whoseTurn] = 0;
        -:  378:
        -:  379:        //int k; move to top
        -:  380:        //Next player draws hand
    #####:  381:        for (k = 0; k < 5; k++) {
    #####:  382:                drawCard(state->whoseTurn, state);//Draw a card
    #####:  383:        }
        -:  384:
        -:  385:        //Update money
    #####:  386:        updateCoins(state->whoseTurn, state, 0);
        -:  387:
    #####:  388:        return 0;
        -:  389:}
        -:  390:
        -:  391:int isGameOver(struct gameState *state) {
        -:  392:        int i;
        -:  393:        int j;
        -:  394:
        -:  395:        //if stack of Province cards is empty, the game ends
    #####:  396:        if (state->supplyCount[province] == 0)
        -:  397:        {
    #####:  398:                return 1;
        -:  399:        }
        -:  400:
        -:  401:        //if three supply pile are at 0, the game ends
    #####:  402:        j = 0;
    #####:  403:        for (i = 0; i < 25; i++)
        -:  404:        {
    #####:  405:                if (state->supplyCount[i] == 0)
        -:  406:                {
    #####:  407:                        j++;
    #####:  408:                }
    #####:  409:        }
    #####:  410:        if ( j >= 3)
        -:  411:        {
    #####:  412:                return 1;
        -:  413:        }
        -:  414:
    #####:  415:        return 0;
    #####:  416:}
        -:  417:
        -:  418:int scoreFor (int player, struct gameState *state) {
        -:  419:
        -:  420:        int i;
    #####:  421:        int score = 0;
        -:  422:        //score from hand
    #####:  423:        for (i = 0; i < state->handCount[player]; i++)
        -:  424:        {
    #####:  425:                if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  426:                if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  427:                if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  428:                if (state->hand[player][i] == province) { score = score + 6; };
    #####:  429:                if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  430:                if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  431:        }
        -:  432:
        -:  433:        //score from discard
    #####:  434:        for (i = 0; i < state->discardCount[player]; i++)
        -:  435:        {
    #####:  436:                if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  437:                if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  438:                if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  439:                if (state->discard[player][i] == province) { score = score + 6; };
    #####:  440:                if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  441:                if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  442:        }
        -:  443:
        -:  444:        //score from deck
    #####:  445:        for (i = 0; i < state->discardCount[player]; i++)
        -:  446:        {
    #####:  447:                if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  448:                if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  449:                if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  450:                if (state->deck[player][i] == province) { score = score + 6; };
    #####:  451:                if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  452:                if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  453:        }
        -:  454:
    #####:  455:        return score;
        -:  456:}
        -:  457:
        -:  458:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  459:        int i;
        -:  460:        int j;
        -:  461:        int highScore;
        -:  462:        int currentPlayer;
        -:  463:
        -:  464:        //get score for each player
    #####:  465:        for (i = 0; i < MAX_PLAYERS; i++)
        -:  466:        {
        -:  467:                //set unused player scores to -9999
    #####:  468:                if (i >= state->numPlayers)
        -:  469:                {
    #####:  470:                        players[i] = -9999;
    #####:  471:                }
        -:  472:                else
        -:  473:                {
    #####:  474:                        players[i] = scoreFor (i, state);
        -:  475:                }
    #####:  476:        }
        -:  477:
        -:  478:        //find highest score
    #####:  479:        j = 0;
    #####:  480:        for (i = 0; i < MAX_PLAYERS; i++)
        -:  481:        {
    #####:  482:                if (players[i] > players[j])
        -:  483:                {
    #####:  484:                        j = i;
    #####:  485:                }
    #####:  486:        }
    #####:  487:        highScore = players[j];
        -:  488:
        -:  489:        //add 1 to players who had less turns
    #####:  490:        currentPlayer = whoseTurn(state);
    #####:  491:        for (i = 0; i < MAX_PLAYERS; i++)
        -:  492:        {
    #####:  493:                if ( players[i] == highScore && i > currentPlayer )
        -:  494:                {
    #####:  495:                        players[i]++;
    #####:  496:                }
    #####:  497:        }
        -:  498:
        -:  499:        //find new highest score
    #####:  500:        j = 0;
    #####:  501:        for (i = 0; i < MAX_PLAYERS; i++)
        -:  502:        {
    #####:  503:                if ( players[i] > players[j] )
        -:  504:                {
    #####:  505:                        j = i;
    #####:  506:                }
    #####:  507:        }
    #####:  508:        highScore = players[j];
        -:  509:
        -:  510:        //set winners in array to 1 and rest to 0
    #####:  511:        for (i = 0; i < MAX_PLAYERS; i++)
        -:  512:        {
    #####:  513:                if ( players[i] == highScore )
        -:  514:                {
    #####:  515:                        players[i] = 1;
    #####:  516:                }
        -:  517:                else
        -:  518:                {
    #####:  519:                        players[i] = 0;
        -:  520:                }
    #####:  521:        }
        -:  522:
    #####:  523:        return 0;
        -:  524:}
        -:  525:
        -:  526:int drawCard(int player, struct gameState *state)
        -:  527:{
        -:  528:        int count;
        -:  529:        int deckCounter;
        6:  530:        if (state->deckCount[player] <= 0) {//Deck is empty
        -:  531:
        -:  532:                //Step 1 Shuffle the discard pile back into a deck
        -:  533:                int i;
        -:  534:                //Move discard to deck
    #####:  535:                for (i = 0; i < state->discardCount[player]; i++) {
    #####:  536:                        state->deck[player][i] = state->discard[player][i];
    #####:  537:                        state->discard[player][i] = -1;
    #####:  538:                }
        -:  539:
    #####:  540:                state->deckCount[player] = state->discardCount[player];
    #####:  541:                state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:                //Shufffle the deck
    #####:  544:                shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:
        -:  546:                if (DEBUG) {//Debug statements
        -:  547:                        printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:                }
        -:  549:
    #####:  550:                state->discardCount[player] = 0;
        -:  551:
        -:  552:                //Step 2 Draw Card
    #####:  553:                count = state->handCount[player];//Get current player's hand count
        -:  554:
        -:  555:                if (DEBUG) {//Debug statements
        -:  556:                        printf("Current hand count: %d\n", count);
        -:  557:                }
        -:  558:
    #####:  559:                deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
    #####:  561:                if (deckCounter == 0)
    #####:  562:                        return -1;
        -:  563:
    #####:  564:                state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:                state->deckCount[player]--;
    #####:  566:                state->handCount[player]++;//Increment hand count
    #####:  567:        }
        -:  568:
        -:  569:        else{
        6:  570:                int count = state->handCount[player];//Get current hand count for player
        -:  571:                int deckCounter;
        -:  572:                if (DEBUG) {//Debug statements
        -:  573:                        printf("Current hand count: %d\n", count);
        -:  574:                }
        -:  575:
        6:  576:                deckCounter = state->deckCount[player];//Create holder for the deck count
        6:  577:                state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        6:  578:                state->deckCount[player]--;
        6:  579:                state->handCount[player]++;//Increment hand count
        -:  580:        }
        -:  581:
        6:  582:        return 0;
        6:  583:}
        -:  584:
        -:  585:int getCost(int cardNumber)
        -:  586:{
    #####:  587:        switch( cardNumber )
        -:  588:        {
        -:  589:        case curse:
    #####:  590:                return 0;
        -:  591:        case estate:
    #####:  592:                return 2;
        -:  593:        case duchy:
    #####:  594:                return 5;
        -:  595:        case province:
    #####:  596:                return 8;
        -:  597:        case copper:
    #####:  598:                return 0;
        -:  599:        case silver:
    #####:  600:                return 3;
        -:  601:        case gold:
    #####:  602:                return 6;
        -:  603:        case adventurer:
    #####:  604:                return 6;
        -:  605:        case council_room:
    #####:  606:                return 5;
        -:  607:        case feast:
    #####:  608:                return 4;
        -:  609:        case gardens:
    #####:  610:                return 4;
        -:  611:        case mine:
    #####:  612:                return 5;
        -:  613:        case remodel:
    #####:  614:                return 4;
        -:  615:        case smithy:
    #####:  616:                return 4;
        -:  617:        case village:
    #####:  618:                return 3;
        -:  619:        case baron:
    #####:  620:                return 4;
        -:  621:        case great_hall:
    #####:  622:                return 3;
        -:  623:        case minion:
    #####:  624:                return 5;
        -:  625:        case steward:
    #####:  626:                return 3;
        -:  627:        case tribute:
    #####:  628:                return 5;
        -:  629:        case ambassador:
    #####:  630:                return 3;
        -:  631:        case cutpurse:
    #####:  632:                return 4;
        -:  633:        case embargo:
    #####:  634:                return 2;
        -:  635:        case outpost:
    #####:  636:                return 5;
        -:  637:        case salvager:
    #####:  638:                return 4;
        -:  639:        case sea_hag:
    #####:  640:                return 4;
        -:  641:        case treasure_map:
    #####:  642:                return 4;
        -:  643:        }
        -:  644:
    #####:  645:        return -1;
    #####:  646:}
        -:  647:
        -:  648:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  649:{
        -:  650:        int i;
        -:  651:        int j;
        -:  652:        int k;
        -:  653:        int x;
        -:  654:        int index;
        1:  655:        int currentPlayer = whoseTurn(state);
        1:  656:        int nextPlayer = currentPlayer + 1;
        -:  657:
        1:  658:        int tributeRevealedCards[2] = {-1, -1};
        -:  659:        int temphand[MAX_HAND];// moved above the if statement
        1:  660:        int drawntreasure=0;
        -:  661:        // int cardDrawn;
        1:  662:        int z = 0;// this is the counter for the temp hand
        1:  663:        if (nextPlayer > (state->numPlayers - 1)) {
    #####:  664:                nextPlayer = 0;
    #####:  665:        }
        -:  666:
        -:  667:
        -:  668:        //uses switch to select card and perform actions
        1:  669:        switch( card )
        -:  670:        {
        -:  671:        case adventurer:
    #####:  672:                return adventurerEffect(state, drawntreasure, z, temphand);
        -:  673:
        -:  674:        case council_room:
        -:  675:                //+4 Cards
    #####:  676:                for (i = 0; i < 4; i++)
        -:  677:                {
    #####:  678:                        drawCard(currentPlayer, state);
    #####:  679:                }
        -:  680:
        -:  681:                //+1 Buy
    #####:  682:                state->numBuys++;
        -:  683:
        -:  684:                //Each other player draws a card
    #####:  685:                for (i = 0; i < state->numPlayers; i++)
        -:  686:                {
    #####:  687:                        if ( i != currentPlayer )
        -:  688:                        {
    #####:  689:                                drawCard(i, state);
    #####:  690:                        }
    #####:  691:                }
        -:  692:
        -:  693:                //put played card in played card pile
    #####:  694:                discardCard(handPos, currentPlayer, state, 0);
        -:  695:
    #####:  696:                return 0;
        -:  697:
        -:  698:        case feast:
        -:  699:                //gain card with cost up to 5
        -:  700:                //Backup hand
    #####:  701:                for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####:  702:                        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  703:                        state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  704:                }
        -:  705:                //Backup hand
        -:  706:
        -:  707:                //Update Coins for Buy
    #####:  708:                updateCoins(currentPlayer, state, 5);
    #####:  709:                x = 1;//Condition to loop on
    #####:  710:                while( x == 1) {//Buy one card
    #####:  711:                        if (supplyCount(choice1, state) <= 0) {
        -:  712:                                if (DEBUG)
        -:  713:                                        printf("None of that card left, sorry!\n");
        -:  714:
        -:  715:                                if (DEBUG) {
        -:  716:                                        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  717:                                }
    #####:  718:                        }
    #####:  719:                        else if (state->coins < getCost(choice1)) {
    #####:  720:                                printf("That card is too expensive!\n");
        -:  721:
        -:  722:                                if (DEBUG) {
        -:  723:                                        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  724:                                }
    #####:  725:                        }
        -:  726:                        else{
        -:  727:
        -:  728:                                if (DEBUG) {
        -:  729:                                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  730:                                }
        -:  731:
    #####:  732:                                gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  733:                                x = 0;//No more buying cards
        -:  734:
        -:  735:                                if (DEBUG) {
        -:  736:                                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  737:                                }
        -:  738:
        -:  739:                        }
        -:  740:                }
        -:  741:
        -:  742:                //Reset Hand
    #####:  743:                for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####:  744:                        state->hand[currentPlayer][i] = temphand[i];
    #####:  745:                        temphand[i] = -1;
    #####:  746:                }
        -:  747:                //Reset Hand
        -:  748:
    #####:  749:                return 0;
        -:  750:
        -:  751:        case gardens:
    #####:  752:                return -1;
        -:  753:
        -:  754:        case mine:
    #####:  755:                j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  756:
    #####:  757:                if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  758:                {
    #####:  759:                        return -1;
        -:  760:                }
        -:  761:
    #####:  762:                if (choice2 > treasure_map || choice2 < curse)
        -:  763:                {
    #####:  764:                        return -1;
        -:  765:                }
        -:  766:
    #####:  767:                if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  768:                {
    #####:  769:                        return -1;
        -:  770:                }
        -:  771:
    #####:  772:                gainCard(choice2, state, 2, currentPlayer);
        -:  773:
        -:  774:                //discard card from hand
    #####:  775:                discardCard(handPos, currentPlayer, state, 0);
        -:  776:
        -:  777:                //discard trashed card
    #####:  778:                for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  779:                {
    #####:  780:                        if (state->hand[currentPlayer][i] == j)
        -:  781:                        {
    #####:  782:                                discardCard(i, currentPlayer, state, 0);
    #####:  783:                                break;
        -:  784:                        }
    #####:  785:                }
        -:  786:
    #####:  787:                return 0;
        -:  788:
        -:  789:        case remodel:
    #####:  790:                j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  791:
    #####:  792:                if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  793:                {
    #####:  794:                        return -1;
        -:  795:                }
        -:  796:
    #####:  797:                gainCard(choice2, state, 0, currentPlayer);
        -:  798:
        -:  799:                //discard card from hand
    #####:  800:                discardCard(handPos, currentPlayer, state, 0);
        -:  801:
        -:  802:                //discard trashed card
    #####:  803:                for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  804:                {
    #####:  805:                        if (state->hand[currentPlayer][i] == j)
        -:  806:                        {
    #####:  807:                                discardCard(i, currentPlayer, state, 0);
    #####:  808:                                break;
        -:  809:                        }
    #####:  810:                }
        -:  811:
        -:  812:
    #####:  813:                return 0;
        -:  814:
        -:  815:        case smithy:
    #####:  816:                return smithyEffect(state, handPos);
        -:  817:
        -:  818:        case village:
        -:  819:                //+1 Card
        1:  820:                drawCard(currentPlayer, state);
        -:  821:
        -:  822:                //+2 Actions
        1:  823:                state->numActions = state->numActions + 2;
        -:  824:
        -:  825:                //discard played card from hand
        1:  826:                discardCard(handPos, currentPlayer, state, 0);
        1:  827:                return 0;
        -:  828:
        -:  829:        case baron:
    #####:  830:                return baronEffect(state, choice1);
        -:  831:
        -:  832:        case great_hall:
        -:  833:                //+1 Card
    #####:  834:                drawCard(currentPlayer, state);
        -:  835:
        -:  836:                //+1 Actions
    #####:  837:                state->numActions++;
        -:  838:
        -:  839:                //discard card from hand
    #####:  840:                discardCard(handPos, currentPlayer, state, 0);
    #####:  841:                return 0;
        -:  842:
        -:  843:        case minion:
    #####:  844:                return minionEffect(state, handPos, choice1, choice2);
        -:  845:
        -:  846:        case steward:
    #####:  847:                return stewardEffect(state, handPos, choice1, choice2, choice3);
        -:  848:
        -:  849:        case tribute:
    #####:  850:                if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
    #####:  851:                        if (state->deckCount[nextPlayer] > 0) {
    #####:  852:                                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  853:                                state->deckCount[nextPlayer]--;
    #####:  854:                        }
    #####:  855:                        else if (state->discardCount[nextPlayer] > 0) {
    #####:  856:                                tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  857:                                state->discardCount[nextPlayer]--;
    #####:  858:                        }
        -:  859:                        else{
        -:  860:                                //No Card to Reveal
        -:  861:                                if (DEBUG) {
        -:  862:                                        printf("No cards to reveal\n");
        -:  863:                                }
        -:  864:                        }
    #####:  865:                }
        -:  866:
        -:  867:                else{
    #####:  868:                        if (state->deckCount[nextPlayer] == 0) {
    #####:  869:                                for (i = 0; i < state->discardCount[nextPlayer]; i++) {
    #####:  870:                                        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  871:                                        state->deckCount[nextPlayer]++;
    #####:  872:                                        state->discard[nextPlayer][i] = -1;
    #####:  873:                                        state->discardCount[nextPlayer]--;
    #####:  874:                                }
        -:  875:
    #####:  876:                                shuffle(nextPlayer,state);//Shuffle the deck
    #####:  877:                        }
    #####:  878:                        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  879:                        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  880:                        state->deckCount[nextPlayer]--;
    #####:  881:                        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  882:                        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  883:                        state->deckCount[nextPlayer]--;
        -:  884:                }
        -:  885:
    #####:  886:                if (tributeRevealedCards[0] == tributeRevealedCards[1]) {//If we have a duplicate card, just drop one
    #####:  887:                        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  888:                        state->playedCardCount++;
    #####:  889:                        tributeRevealedCards[1] = -1;
    #####:  890:                }
        -:  891:
    #####:  892:                for (i = 0; i <= 2; i++) {
    #####:  893:                        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) {//Treasure cards
    #####:  894:                                state->coins += 2;
    #####:  895:                        }
        -:  896:
    #####:  897:                        else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) {//Victory Card Found
    #####:  898:                                drawCard(currentPlayer, state);
    #####:  899:                                drawCard(currentPlayer, state);
    #####:  900:                        }
        -:  901:                        else{//Action Card
    #####:  902:                                state->numActions = state->numActions + 2;
        -:  903:                        }
    #####:  904:                }
        -:  905:
    #####:  906:                return 0;
        -:  907:
        -:  908:        case ambassador:
    #####:  909:                return ambassadorEffect(state, handPos, choice1, choice2);
        -:  910:
        -:  911:        case cutpurse:
        -:  912:
    #####:  913:                updateCoins(currentPlayer, state, 2);
    #####:  914:                for (i = 0; i < state->numPlayers; i++)
        -:  915:                {
    #####:  916:                        if (i != currentPlayer)
        -:  917:                        {
    #####:  918:                                for (j = 0; j < state->handCount[i]; j++)
        -:  919:                                {
    #####:  920:                                        if (state->hand[i][j] == copper)
        -:  921:                                        {
    #####:  922:                                                discardCard(j, i, state, 0);
    #####:  923:                                                break;
        -:  924:                                        }
    #####:  925:                                        if (j == state->handCount[i])
        -:  926:                                        {
    #####:  927:                                                for (k = 0; k < state->handCount[i]; k++)
        -:  928:                                                {
        -:  929:                                                        if (DEBUG)
        -:  930:                                                                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####:  931:                                                }
    #####:  932:                                                break;
        -:  933:                                        }
    #####:  934:                                }
        -:  935:
    #####:  936:                        }
        -:  937:
    #####:  938:                }
        -:  939:
        -:  940:                //discard played card from hand
    #####:  941:                discardCard(handPos, currentPlayer, state, 0);
        -:  942:
    #####:  943:                return 0;
        -:  944:
        -:  945:
        -:  946:        case embargo:
    #####:  947:                return embargoEffect(state, handPos, choice1);
        -:  948:
        -:  949:        case outpost:
        -:  950:                //set outpost flag
    #####:  951:                state->outpostPlayed++;
        -:  952:
        -:  953:                //discard card
    #####:  954:                discardCard(handPos, state->whoseTurn, state, 0);
    #####:  955:                return 0;
        -:  956:
        -:  957:        case salvager:
        -:  958:                //+1 buy
    #####:  959:                state->numBuys++;
        -:  960:
    #####:  961:                if (choice1)
        -:  962:                {
        -:  963:                        //gain coins equal to trashed card
    #####:  964:                        state->coins = state->coins + getCost( handCard(choice1, state) );
        -:  965:                        //trash card
    #####:  966:                        discardCard(choice1, currentPlayer, state, 1);
    #####:  967:                }
        -:  968:
        -:  969:                //discard card
    #####:  970:                discardCard(handPos, currentPlayer, state, 0);
    #####:  971:                return 0;
        -:  972:
        -:  973:        case sea_hag:
    #####:  974:                for (i = 0; i < state->numPlayers; i++) {
    #####:  975:                        if (i != currentPlayer) {
    #####:  976:                                state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];          state->deckCount[i]--;
    #####:  977:                                state->discardCount[i]++;
    #####:  978:                                state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####:  979:                        }
    #####:  980:                }
    #####:  981:                return 0;
        -:  982:
        -:  983:        case treasure_map:
        -:  984:                //search hand for another treasure_map
    #####:  985:                index = -1;
    #####:  986:                for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  987:                {
    #####:  988:                        if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -:  989:                        {
    #####:  990:                                index = i;
    #####:  991:                                break;
        -:  992:                        }
    #####:  993:                }
    #####:  994:                if (index > -1)
        -:  995:                {
        -:  996:                        //trash both treasure cards
    #####:  997:                        discardCard(handPos, currentPlayer, state, 1);
    #####:  998:                        discardCard(index, currentPlayer, state, 1);
        -:  999:
        -: 1000:                        //gain 4 Gold cards
    #####: 1001:                        for (i = 0; i < 4; i++)
        -: 1002:                        {
    #####: 1003:                                gainCard(gold, state, 1, currentPlayer);
    #####: 1004:                        }
        -: 1005:
        -: 1006:                        //return success
    #####: 1007:                        return 1;
        -: 1008:                }
        -: 1009:
        -: 1010:                //no second treasure_map found in hand
    #####: 1011:                return -1;
        -: 1012:        }
        -: 1013:
    #####: 1014:        return -1;
        1: 1015:}
        -: 1016:
        -: 1017:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1018:{
        -: 1019:
        -: 1020:        //if card is not trashed, added to Played pile
        1: 1021:        if (trashFlag < 1)
        -: 1022:        {
        -: 1023:                //add card to played pile
        1: 1024:                state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        1: 1025:                state->playedCardCount++;
        1: 1026:        }
        -: 1027:
        -: 1028:        //set played card to -1
        1: 1029:        state->hand[currentPlayer][handPos] = -1;
        -: 1030:
        -: 1031:        //remove card from player's hand
        1: 1032:        if ( handPos == (state->handCount[currentPlayer] - 1) ) //last card in hand array is played
        -: 1033:        {
        -: 1034:                //reduce number of cards in hand
    #####: 1035:                state->handCount[currentPlayer]--;
    #####: 1036:        }
        1: 1037:        else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1038:        {
        -: 1039:                //reduce number of cards in hand
    #####: 1040:                state->handCount[currentPlayer]--;
    #####: 1041:        }
        -: 1042:        else
        -: 1043:        {
        -: 1044:                //replace discarded card with last card in hand
        1: 1045:                state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1046:                //set last card to -1
        1: 1047:                state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1048:                //reduce number of cards in hand
        1: 1049:                state->handCount[currentPlayer]--;
        -: 1050:        }
        -: 1051:
        1: 1052:        return 0;
        -: 1053:}
        -: 1054:
        -: 1055:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1056:{
        -: 1057:        //Note: supplyPos is enum of choosen card
        -: 1058:
        -: 1059:        //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1060:        if ( supplyCount(supplyPos, state) < 1 )
        -: 1061:        {
    #####: 1062:                return -1;
        -: 1063:        }
        -: 1064:
        -: 1065:        //added card for [whoseTurn] current player:
        -: 1066:        // toFlag = 0 : add to discard
        -: 1067:        // toFlag = 1 : add to deck
        -: 1068:        // toFlag = 2 : add to hand
        -: 1069:
    #####: 1070:        if (toFlag == 1)
        -: 1071:        {
    #####: 1072:                state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1073:                state->deckCount[player]++;
    #####: 1074:        }
    #####: 1075:        else if (toFlag == 2)
        -: 1076:        {
    #####: 1077:                state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1078:                state->handCount[player]++;
    #####: 1079:        }
        -: 1080:        else
        -: 1081:        {
    #####: 1082:                state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1083:                state->discardCount[player]++;
        -: 1084:        }
        -: 1085:
        -: 1086:        //decrease number in supply pile
    #####: 1087:        state->supplyCount[supplyPos]--;
        -: 1088:
    #####: 1089:        return 0;
    #####: 1090:}
        -: 1091:
        -: 1092:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1093:{
        -: 1094:        int i;
        -: 1095:
        -: 1096:        //reset coin count
        1: 1097:        state->coins = 0;
        -: 1098:
        -: 1099:        //add coins for each Treasure card in player's hand
       12: 1100:        for (i = 0; i < state->handCount[player]; i++)
        -: 1101:        {
        5: 1102:                if (state->hand[player][i] == copper)
        -: 1103:                {
        4: 1104:                        state->coins += 1;
        4: 1105:                }
        1: 1106:                else if (state->hand[player][i] == silver)
        -: 1107:                {
    #####: 1108:                        state->coins += 2;
    #####: 1109:                }
        1: 1110:                else if (state->hand[player][i] == gold)
        -: 1111:                {
    #####: 1112:                        state->coins += 3;
    #####: 1113:                }
        5: 1114:        }
        -: 1115:
        -: 1116:        //add bonus
        1: 1117:        state->coins += bonus;
        -: 1118:
        1: 1119:        return 0;
        -: 1120:}
        -: 1121:
        -: 1122:
        -: 1123://end of dominion.c
